package:
  name: nemo
  version: 1.22.0
  epoch: 0
  description: conversational AI toolkit built for researchers working on ASR, TTS, LLMs, and NLP.
  copyright:
    - license: Apache-2.0
  target-architecture:
    - x86_64
  options:
    no-depends: true
  dependencies:
    runtime:
      - libgomp
      - pytorch-cuda12
      # These are to be run time dependencies and built as seperate wolfi packages?
      # pytorch-cuda12 - Setting PATH necessary?
      # k2
      # graphviz
      # ais cli

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - cmake
      - ffmpeg-dev
      - libsndfile-dev
      - libavdevice60
      - freetype-dev
      - swig
      - py3.11-installer
      - py3.11-pip
      - python-3.11
      - python-3.11-dev
      - samurai
      - # wolfi equivalent of sox

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/NVIDIA/NeMo.git
      tag: v${{package.version}}
      expected-commit: 0b7467ebd158ef6876dd147189517b25ef626982

  - runs: git submodule update --init --recursive

  - runs: |
      # Setup the virtualenv

      python -m venv .venv --system-site-packages

      .venv/bin/pip install --upgrade wheel pip==23.3.2 setuptools==65.5.1

      .venv/bin/pip install Cython
      
  - runs: |
      # fasttext is a pip dependency of nemo per requirements/requirements_nlp.txt
      # It will not build with gcc 13. The commit here is 0.4.0 branch + fix for gcc 13.
      d=$(mktemp -d)
      ( set -ex; sdir="$PWD" && cd "$d" &&
        git clone https://github.com/facebookresearch/fastText &&
        cd fastText && git checkout v0.9.2 &&
        patch -p1 < "$sdir/fastText-compile-gcc-13.patch" &&
        "$sdir/.venv/bin/pip" install .
        )
      rm -Rf "$d"

  - runs: |
      # install megatron-core from checkout specified in Dockerfile
      git clone https://github.com/NVIDIA/Megatron-LM.git && \
      cd Megatron-LM && \
      git checkout 27cbe46714a50c43ed290f1b1472db8d2780c55c && \
      .venv/bin/pip install .

  - runs: |

      # install apex(intended to address a bug in Nvidia's pytorch-23.11 container)
      # But we are neither using this container as the base, nor this version of pytorch, the need to use this must be evaluated.
          # this needs cuda drivers
          # should this package move to extra-packages repository for the cuda packages?

      # Install transformer engine
          # same as Apex

      # pip3 uninstall -y sacrebleu torchtext most likely not needed as these came from nvidia-pytorch image

      # export LHOTSE_REQUIRE_TORCHAUDIO=0

      # install requirements from all requirements_xyz.txt
      for f in ./requirements/requirements*.txt;
        do pip3 install --disable-pip-version-check --no-cache-dir -r $f
      done


      # Why are these explicitly installed when requirements.txt already covers them?
      pip install flash-attn
      pip install numba>=0.57.1

      pip install ".[all]" # installs nemo

  - runs: |
      echo ${{targets.destdir}}
      mkdir -p ${{targets.destdir}}/usr/share/nemo
      mv .venv ${{targets.destdir}}/usr/share/nemo
      rm -rf ${{targets.destdir}}/usr/share/nemo/.venv/bin/__pycache*
      sed -i "s|/home/build|/usr/share/nemo|g" ${{targets.destdir}}/usr/share/nemo/.venv/bin/*

  - runs: |
      # allow site-packages
      sed -i "s|include-system-site-packages = false|include-system-site-packages = true|g" ${{targets.destdir}}/usr/share/nemo/.venv/pyvenv.cfg

  - uses: strip

update:
  enabled: true
  github:
    identifier: NVIDIA/NeMo
    tag-filter: v
    strip-prefix: v


#test:
#  environment:
#    contents:
#      packages:
#        # might need additional packages, placeholder section
#        - wolfi-base
#  pipeline:
#    - runs: |
#        python3 ./nemo_quickstart.py > output.out 2>&1
#        grep -E "ERROR|None" output.out && exit 1
#        # else, to keep it minimal run the following
#        # python -c "import nemo.collections.nlp as nemo_nlp" && \
#        # python -c "import nemo.collections.tts as nemo_tts" && \
#       # python -c "import nemo_text_processing.text_normalization as text_normalization"
