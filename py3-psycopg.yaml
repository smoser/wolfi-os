environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - poetry
      - py3-gpep517
      - py3-setuptools
      - py3-wheel
      - python3
      - wolfi-base

package:
  copyright:
    - license: LGPL-3.0-only
  dependencies:
    runtime:
      - libpq-16
      - py3-typing-extensions
      - py3-tzdata
      - python3
  description: PostgreSQL database adapter for Python
  epoch: 0
  name: py3-psycopg
  version: 3.2.1

pipeline:
  - uses: git-checkout
    with:
      expected-commit: bb47d3944d1c65d9baf83808696aba1b2dfed9af
      repository: https://github.com/psycopg/psycopg
      tag: ${{package.version}}

  - name: Python Build
    runs: "cd psycopg\nexport SETUPTOOLS_SCM_PRETEND_VERSION=${{package.version}}\n python3 -m gpep517 build-wheel \\\n --wheel-dir dist \\\n --output-fd 3 3>&1 >&2\n\n python3 -m installer -d \"${{targets.destdir}}\" \\\n dist/*.whl\n"

  - uses: strip

test:
  environment:
    contents:
      packages:
        - postgresql
        - postgresql-client
        - wolfi-base
        - shadow
        - sudo-rs
        - glibc-locales
    environment:
      PGDATA: /tmp/test_db
      PGUSER: wolfi
  pipeline:
    - name: Test database creation
      runs: 'useradd $PGUSER

        sudo -u $PGUSER initdb -D /tmp/test_db

        sudo -u $PGUSER pg_ctl -D /tmp/test_db -l /tmp/logfile start

        sudo -u $PGUSER createdb testdb

        psql -lqt | cut -d \| -f 1 | grep -qw testdb

      '
    - name: Test psycopg
    - runs: "cat <<'EOF' >> /tmp/test.py\nimport psycopg\n\ndef main():\n    conn = psycopg.connect(dbname=\"testdb\", user=\"wolfi\")\n    cursor = conn.cursor()\n\n    try:\n        # Create Table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS example_table (\n                id SERIAL PRIMARY KEY,\n                message TEXT\n            )\n        \"\"\")\n\n        # Insert value\n        cursor.execute(\"INSERT INTO example_table (message) VALUES (%s)\", (\"Hello Wolfy!\",))\n        conn.commit()\n\n        # Select and print\n        cursor.execute(\"SELECT message FROM example_table\")\n        result = cursor.fetchone()\n        message = result[0].decode(\"utf-8\")\n        print(\"Message retrieved from database:\", message)\n\n    except Exception as e:\n        print(\"Error:\", e)\n\n    finally:\n        cursor.close()\n        conn.close()\n\nif __name__ == \"__main__\":\n    main()\nEOF\npython3 /tmp/test.py\n"
    - uses: py/pip-check

update:
  enabled: true
  github:
    identifier: psycopg/psycopg
    use-tag: true
  ignore-regex-patterns:
    - pool-*
    - 3.0.dev*
