package:
  name: py3-grpcio-tools
  version: 1.67.0
  epoch: 1
  description: Protobuf code generator for gRPC
  copyright:
    - license: Apache-2.0
  dependencies:
    provider-priority: 0

vars:
  pypi-package: grpcio-tools
  import: grpc_tools

data:
  - name: py-versions
    items:
      3.10: '310'
      3.11: '311'
      3.12: '312'
      3.13: '300'

environment:
  contents:
    packages:
      - cython
      - git
      - py3-supported-build-base-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/grpc/grpc
      tag: v${{package.version}}
      expected-commit: 74f245857247b4b3e28a753d85d06ae2d5a55434

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    description: python${{range.key}} version of ${{vars.pypi-package}}
    dependencies:
      provider-priority: ${{range.value}}
      provides:
        - py3-${{vars.pypi-package}}
      runtime:
        - py${{range.key}}-protobuf
        - py${{range.key}}-grpcio
        - py${{range.key}}-setuptools
    pipeline:
      - uses: py/pip-build-install
        with:
          python: python${{range.key}}
      - uses: strip
    test:
      pipeline:
        - uses: python/import
          with:
            python: python${{range.key}}
            imports: |
              import ${{vars.import}}

  - name: py3-supported-${{vars.pypi-package}}
    description: meta package providing ${{vars.pypi-package}} for supported python versions.
    dependencies:
      runtime:
        - py3.10-${{vars.pypi-package}}
        - py3.11-${{vars.pypi-package}}
        - py3.12-${{vars.pypi-package}}
        - py3.13-${{vars.pypi-package}}

test:
  pipeline:
    - uses: python/import
      with:
        imports: |
          import ${{vars.import}}
    - name: Verify Installation
      runs: |
        # Ensure that grpcio-tools is installed
        python3 -c "import grpc_tools.protoc" || exit 1
        echo "grpcio-tools package is installed."
    - name: Test Protobuf Compilation
      runs: |
        # Create a temporary directory for testing
        mkdir -p /home/build/test-grpcio-tools
        cd /home/build/test-grpcio-tools

        # Create a sample .proto file for testing
        echo 'syntax = "proto3"; package test; message TestMessage { string test_field = 1; }' > test.proto

        # Compile the .proto file using grpcio-tools
        python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. test.proto || exit 1
        echo "Protobuf file compiled successfully."

        # Check if Python files were generated
        if [ ! -f test_pb2.py ] || [ ! -f test_pb2_grpc.py ]; then
          echo "Generated Python files not found!"
          exit 1
        fi
        echo "Generated Python files found."
    - name: Clean Up
      runs: |
        # Clean up the test files after the test
        rm -rf /home/build/test-grpcio-tools

update:
  enabled: true
  github:
    identifier: grpc/grpc
    strip-prefix: v
    use-tag: true
